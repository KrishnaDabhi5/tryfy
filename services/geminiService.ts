
import { GoogleGenAI, Modality } from '@google/genai';
import { ImageFile } from '../types';

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

export const generateTryOnImage = async (
  personImage: ImageFile,
  garmentImage: ImageFile
): Promise<string> => {
  const prompt = `From the provided images, create a photorealistic image showing the person from the first image wearing the garment from the second image. The final output image should focus on the person wearing the garment against a simple, neutral background. Ensure the fit and drape of the clothing appear natural on the person's body.`;
  
  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [
          { text: prompt },
          {
            inlineData: {
              data: personImage.base64,
              mimeType: personImage.file.type,
            },
          },
          {
            inlineData: {
              data: garmentImage.base64,
              mimeType: garmentImage.file.type,
            },
          },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    for (const part of response.candidates?.[0]?.content?.parts || []) {
      if (part.inlineData) {
        return `data:${part.inlineData.mimeType};base64,${part.inlineData.data}`;
      }
    }

    throw new Error('No image was generated by the model.');
  } catch (error) {
    console.error('Error generating image with Gemini API:', error);
    if (error instanceof Error) {
        return Promise.reject(`Failed to generate image: ${error.message}`);
    }
    return Promise.reject('An unknown error occurred while generating the image.');
  }
};
